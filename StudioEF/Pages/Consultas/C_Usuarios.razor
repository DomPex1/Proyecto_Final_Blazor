@page "/C_Usuarios"

@using Models
@using BLL
@using Reportes;
@using Paginacion;

@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <p class="h4 text-center">Usted no esta autorizado para acceder a esta pagina</p>
    </NotAuthorized>
</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{

    <div class="card-img">
        <div class="card-header bg-dark">
            <h1>Consulta de Usuarios</h1>
        </div>

        <div class="card-body">
            <form>
                <div class="form-row">

                    <div class="form-group">
                        <label>Filtro</label>
                        <select class="form-control" @bind="Filtro">
                            <option value="0">Todo</option>
                            <option value="1">Usuario Id</option>
                            <option value="2">Nombre</option>
                            <option value="4">Nombre Usuario</option>
                            <option value="4">Contrasena</option>
                            <option value="5">Email</option>

                        </select>
                    </div>
                    &nbsp;
                    <div class="form-group">
                        <label>Criterio</label>
                        <div class="input-group">
                            <input type="text" @bind="Criterio" class="form-control">
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary input-group-text" @onclick="@(u => Consultar(0))"><i class="oi oi-list-rich" /> Consultar</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                    <table class="table table-striped">
                        <thead class="thead-light">
                            <tr>
                                <th>Usuario Id</th>
                                <th>Nombre</th>
                                <th>Nombre Usuario</th>
                                <th>Contraseña</th>
                                <th>Email</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white">
                            @foreach (var item in AuxListaUsuarios)
                            {
                            <tr>
                                <td>@item.UsuarioId</td>
                                <td>@item.Nombres</td>
                                <td>@item.NombreUsuario</td>
                                <td>@item.Contrasena</td>
                                <td>@item.Email</td>
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </form>
        </div>

        <div class="form-group text-center" display: inline-block>
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center">
                    <li class="page-item">
                        <button class="page-link btn btn-primary"
                                @onclick="@(e => NavegateTo("Anterior"))" tabindex="-1">
                            Anterior
                        </button>
                    </li>

                    @for (int i = 0; i < TotalPaginas; i++)
                    {
                        var NumeroPagina = i;
                        <li class="page-item">
                            <button class="@(pagina.paginas == NumeroPagina ? "page-link btn btn-dark" : "page-link btn btn-danger")"
                                    @onclick="@(u => Consultar(NumeroPagina))">
                                @(i + 1)
                            </button>
                        </li>
                    }

                    <li class="page-item">
                        <button type="button" class="page-link btn btn-primary" @onclick="@(e => NavegateTo("Siguiente"))" tabindex="-1">Siguiente</button>
                    </li>
                </ul>
            </nav>
        </div>

        <div class="card-footer bg-dark">
            <div class="form-group text-center">
                <button class="btn btn-lg btn-primary oi oi-file" @onclick="GenerarReporte"> Generar Reporte</button>
            </div>

            <form>
                @if (Data is { })
                {
                    <object data="@pdfContent" width="1000" height="500"></object>
                }
            </form>
        </div>
    </div>
}

@code {
    public List<Usuarios> ListaUsuarios { get; set; }
    public List<Usuarios> AuxListaUsuarios { get; set; }

    Paginas pagina = new Paginas();

    public string Criterio { get; set; }

    private int TotalRegistros { get; set; }
    private int TotalPaginas { get; set; }
    public string Filtro { get; set; }

    byte[] Data;
    string pdfContent = "";

    protected override void OnInitialized()
    {
        Nuevo();
    }

    private void Nuevo()
    {
        ListaUsuarios = new List<Usuarios>();
        AuxListaUsuarios = new List<Usuarios>();
        Filtro = "0";
        Criterio = string.Empty;
    }

    public void Consultar(int pag)
    {
        switch (Filtro)
        {
            case "0": //Todo
                ListaUsuarios = UsuariosBLL.GetList(c => true);
                break;
            case "1": //UsuarioId
                if (Criterio.Trim().Length > 0)
                {
                    try
                    {
                        int usuarioId = Convert.ToInt32(Criterio);
                        ListaUsuarios = UsuariosBLL.GetList(c => c.UsuarioId == usuarioId);
                    }
                    catch (FormatException)
                    {
                        toast.ShowWarning("Ingrese un numero");
                    }
                }
                else
                {
                    ListaUsuarios = UsuariosBLL.GetList(c => true).OrderBy(c => c.UsuarioId).ToList();
                }
                break;

            case "2": //Nombres
                if (Criterio.Trim().Length > 0)
                    ListaUsuarios = UsuariosBLL.GetList(c => c.Nombres.Contains(Criterio));
                else
                    ListaUsuarios = UsuariosBLL.GetList(c => true).OrderBy(c => c.Nombres).ToList();
                break;
            case "3": //Nombre usuario
                if (Criterio.Trim().Length > 0)
                    ListaUsuarios = UsuariosBLL.GetList(c => c.NombreUsuario.Contains(Criterio));
                else
                    ListaUsuarios = UsuariosBLL.GetList(c => true).OrderBy(c => c.NombreUsuario).ToList();
                break;
            case "4": //Contrasena
                if (Criterio.Trim().Length > 0)
                    ListaUsuarios = UsuariosBLL.GetList(c => c.Contrasena.Contains(Criterio));
                else
                    ListaUsuarios = UsuariosBLL.GetList(c => true).OrderBy(c => c.Contrasena).ToList();
                break;
            case "6": //Descripcion
                if (Criterio.Trim().Length > 0)
                    ListaUsuarios = UsuariosBLL.GetList(c => c.Email.Contains(Criterio));
                else
                    ListaUsuarios = UsuariosBLL.GetList(c => true).OrderBy(c => c.Email).ToList();
                break;

        }

        TotalPaginas = (int)Math.Ceiling(ListaUsuarios.Count() / (decimal)pagina.cantidaditems);
        ActualizarLista(pag);

        Filtro = "0";

    }

    private void ActualizarLista(int NumeroPagina)
    {
        AuxListaUsuarios = ListaUsuarios.Skip(NumeroPagina * pagina.cantidaditems).Take(pagina.cantidaditems).ToList();
        pagina.paginas = NumeroPagina;
    }

    private void NavegateTo(string direccion)
    {
        if (direccion == "Anterior" && pagina.paginas != 0)
            pagina.paginas -= 1;
        if (direccion == "Siguiente" && pagina.paginas != TotalPaginas)
            pagina.paginas += 1;

        ActualizarLista(pagina.paginas);
    }

    private void GenerarReporte()
    {
        ReporteUsuario Usuario = new ReporteUsuario();

        Data = Usuario.Reporte(AuxListaUsuarios);

        pdfContent = "data:application/pdf;base64,";
        pdfContent += System.Convert.ToBase64String(Data);
    }

}
