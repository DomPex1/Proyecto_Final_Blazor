@page "/RVentas"


@using Models
@using BLL

@inject IToastService toast

@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <p class="h4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>
</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <EditForm Model="Venta" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card-img">
            <div class="card-header bg-dark">
                <h3>Registro Ventas</h3>
            </div>
            <div class="card-body">
                <form>
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>Venta Id:</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="Venta.VentaId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Cliente Id:</label>
                        <select @bind="ClienteSeleccionado" class="form-control">
                            <option value="" disabled selected>Seleccione un cliente</option>
                            @foreach (var item in ListaClientes)
                            {
                                <option value="@item.ClienteId">@item.Nombres @item.Apellidos</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Fecha:</label>
                        <InputDate @bind-Value="Venta.Fecha" class="form-control" />
                        <ValidationMessage For="@(() => Venta.Fecha)" />
                    </div>

                    <div class="form-group">
                        <label>Articulo Id:</label>
                        <select @bind="ArticuloSeleccionado" class="form-control" @onfocusout="ObtenerPrecioArticulo">
                            <option value="" disabled selected>Seleccione un Articulo</option>
                            @foreach (var item in ListaArticulos)
                            {
                                <option value="@item.ArticuloId">@item.Descripcion</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Cantidad:</label>
                        <InputNumber @bind-Value="cantidad" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Precio Articulo:</label>
                        <InputNumber @bind-Value="precioArticulo" class="form-control" readOnly="true" />

                    </div>

                    <div class="form-group">
                        <label>Evento Id:</label>
                        <select @bind="eventoId" class="form-control">
                            <option value="" disabled selected>Seleccione un Evento</option>
                            @foreach (var item in ListaEventos)
                            {
                                <option value="@item.EventoId">@item.Descripcion : @item.Precio</option>
                            }

                        </select>
                    </div>

                    <div class="form-group">
                        <label>Precio Evento:</label>
                        <InputNumber @bind-Value="precioEvento" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Monto:</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="monto" class="form-control" @onfocusout="CalcularTotal" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-info" @onclick="Agregar">Agregar</button>
                            </div>
                        </div>
                    </div>

                    @*Detalle*@
                    @*La Tabla*@
                    <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                        <table class="table table-striped">
                            <thead class="thead-light">
                                <tr>
                                    <th>Articulo Id</th>
                                    <th>Descripción</th>
                                    <th>Cantidad</th>
                                    <th>Precio Articulo</th>
                                    <th>Evento Id</th>
                                    <th>Precio Evento</th>
                                    <th>Monto</th>

                                </tr>
                            </thead>
                            @*Asignacion de los datos del Detalle*@
                            <tbody class="bg-white">
                                @foreach (var item in Venta.VentasDetalle)
                                {
                                    <tr>
                                        <td>@item.ArticuloId</td>
                                        <td>@item.EventoId</td>
                                        <td>@ObtenerDescripcion(item.ArticuloId)</td>
                                        <td>@item.Cantidad</td>
                                        <td>@item.PrecioArticulo</td>
                                        <td>@item.PrecioEvento</td>
                                        <td>@item.Monto</td>



                                        <td><button type="button" class="btn btn-outline-danger" @onclick="(() => EliminarDetalle(item))"> Remover</button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="form-group">
                        <label>Total:</label>
                        <InputNumber @bind-Value="Venta.Total" class="form-control" ReadOnly="true" />
                    </div>

                </form>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="oi oi-plus" />Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success"><i class="oi oi-hard-drive" />Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="oi oi-trash" />Eliminar</button>
                </div>
            </div>
        </div>


    </EditForm>

}


@code {

    Ventas Venta = new Ventas();
    VentasDetalle VentaD = new VentasDetalle();

    public int ClienteSeleccionado { get; set; }

    public int ArticuloSeleccionado { get; set; }

    public int cantidad { get; set; }
    public decimal monto { get; set; }
    public decimal precioArticulo { get; set; }
    public decimal precioEvento { get; set; }
    public int eventoId { get; set; }


    List<Clientes> ListaClientes = new List<Clientes>();
    List<Articulos> ListaArticulos = new List<Articulos>();
    List<Eventos> ListaEventos = new List<Eventos>();


    protected override void OnInitialized()
    {
        Nuevo();
    }

    private void Nuevo()
    {
        Venta = new Ventas();
        ListaArticulos = ArticulosBLL.GetList(a => true);
        ListaClientes = ClientesBLL.GetList(c => true);
        ListaEventos = EventosBLL.GetList(vd => true);
    }


    private string ObtenerDescripcion(int id)
    {
        string auxDescripcion = string.Empty;
        Articulos a = ArticulosBLL.Buscar(id);

        auxDescripcion = a.Descripcion;

        return auxDescripcion;
    }

    private void ObtenerPrecioArticulo()
    {
        Articulos auxArticulo = ArticulosBLL.Buscar(ArticuloSeleccionado);

        if (auxArticulo != null)
        {
            precioArticulo = auxArticulo.Precio;
        }
    }

    private void ObtenerPrecioEvento()
    {
        Eventos auxEvento = EventosBLL.Buscar(ArticuloSeleccionado);

        if (auxEvento != null)
        {
            precioArticulo = auxEvento.Precio;
        }
    }

    private void Guardar()
    {
        bool guardo;


        guardo = VentasBLL.Guardar(Venta);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    private void Buscar()
    {
        if (Venta.VentaId > 0)
        {
            var encontrado = VentasBLL.Buscar(Venta.VentaId);

            if (encontrado != null)
                this.Venta = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = VentasBLL.Eliminar(Venta.VentaId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }


    private void Agregar()
    {
        if (ClienteSeleccionado == 0)
        {
            toast.ShowWarning("Tiene que seleccionar un producto.");
            return;
        }

        if (cantidad <= 0)
        {
            toast.ShowWarning("La cantidad debe ser mayor a 0.");
            return;
        }
        else
        {
            this.Venta.VentasDetalle.Add(new VentasDetalle
            {

                ArticuloId = ArticuloSeleccionado,
                Descripcion = ObtenerDescripcion(ArticuloSeleccionado),
                Cantidad = cantidad,
                PrecioArticulo = precioArticulo,
                PrecioEvento = precioEvento,
                Monto = monto
            });

            ClienteSeleccionado = 0;



        }

    }

    private void CalcularTotal()
    {
        decimal total = 0;

        foreach (var item in Venta.VentasDetalle)
        {
            total += (item.PrecioArticulo * item.Cantidad) + item.PrecioEvento;
        }
        Venta.Total = total;
    }


    private void EliminarDetalle(VentasDetalle detalle)
    {
        try
        {
            Venta.VentasDetalle.Remove(detalle);
            CalcularTotal();
        }
        catch (Exception)
        {

            throw;
        }
    }



}


